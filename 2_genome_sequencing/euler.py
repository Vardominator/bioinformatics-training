import random

def construct_graph(graph_str):
    graph = {}
    for s in graph_str:
        edges = s.split('->')
        node = edges[0].strip()
        neighbors = edges[1].strip().split(',')
        graph[node] = neighbors
    return graph

def find_euler_cycle(graph):
    v0 = random.choice(graph.keys())
    visited_edges = set()
    cycle = []
    def find_cycle(node):
        for neighbor in graph[node]:
            edge = "{} -> {}".format(node, neighbor)
            if edge not in visited_edges:
                visited_edges.add(edge)
                find_cycle(neighbor)
        cycle.append(node)
                
    find_cycle(v0)
    return cycle

def find_euler_path(graph):
    incoming_edges = {}
    for node in graph:
        incoming_edges[node] = 0
    for node in graph:
        for neighbor in graph[node]:
            if neighbor not in incoming_edges:
                incoming_edges[neighbor] = 1
            else:
                incoming_edges[neighbor] += 1
    
    v0 = list(graph.keys())[0]
    # for node in graph:
    #     print("Node:{} ; Outgoing:{} ; Incoming:{}".format(node, len(graph[node]), incoming_edges[node]))
    #     if len(graph[node]) > incoming_edges[node]:
    #         v0 = node
    #         break

    visited_edges = set()
    path = []
    def find_path(node):
        for neighbor in graph[node]:
            edge = "{} -> {}".format(node, neighbor)
            if edge not in visited_edges:
                visited_edges.add(edge)
                if neighbor in graph:
                    find_path(neighbor)
                else:
                    path.append(neighbor)
        path.append(node)
                
    find_path(v0)
    return path

with open('data/d6.txt', 'r') as f:
    graph_str = f.read().splitlines()

graph = construct_graph(graph_str)
path = find_euler_path(graph)
print(path)
circular_str = path[0]
for p in path[1:]:
    circular_str += p[-1]

print(circular_str)

with open('data/d6result.txt', 'w') as f:
    f.write('->'.join([c for c in path[::-1]]))
# 0000000100000011000100010010000100110010001100110100000101000011010100010101001001010011011000010110001101110000111000101110010011100111010001110100101011001111000111101001011010011111000111111001111001101011011011111001010111001111111011011101110111100110

# 00000001010000011101111100111000110100101100000010110000010101000101111000010111011110010101011101110011000011101001111100110110101001011101001110100110100110001001110000110101101110001001000001110000010101010001100001111111111100101101001110001100000100011111010

# 001001010010001011010110010001100010011100000000010000001111010000101000011111011110001100101111001111011100011100010001111110001010011000011000001100110011111001101111111110010101010010101101000110111010111110000101110011000110101110100010101000111010010110001011111101011011100101101101010110000100100110010010000010110011010100111011101111101001101101100101000100001000100101110110001111001001111111011001110010000110110000001010111000011100111010100000111011011110101010111101101001111000001001101000000011010010010
# 001001010010001011010110010001100010011100000000010000001111010000101000011111011110001100101111001111011100011100010001111110001010011000011000001100110011111001101111111110010101010010101101000110111010111110000101110011000110101110100010101000111010010110001011111101011011100101101101010110000100100110010010000010110011010100111011101111101001101101100101000100001000100101110110001111001001111111011001110010000110110000001010111000011100111010100000111011011110101010111101101001111000001001101000000011010010010


